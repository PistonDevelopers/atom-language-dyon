'name': 'Dyon'
'scopeName': 'source.dyon'
'fileTypes': [
  'dyon'
]

'repository': {
  'block_doc_comment': {
    'comment': 'Block documentation comment'
    'name': 'comment.block.documentation.dyon'
    'begin': '/\\*[\\*!](?![\\*/])'
    'end': '\\*/'
    'patterns': [
      { 'include': '#block_doc_comment' }
      { 'include': '#block_comment' }
    ]
  }
  'block_comment': {
    'comment': 'Block comment'
    'name': 'comment.block.dyon'
    'begin': '/\\*'
    'end': '\\*/'
    'patterns': [
      { 'include': '#block_doc_comment' }
      { 'include': '#block_comment' }
    ]
  }
  'line_doc_comment': {
    'comment': 'Single-line documentation comment'
    'name': 'comment.line.documentation.dyon'
    'begin': '//[!/](?=[^/])'
    'end': '$'
  }
  'line_comment': {
    'comment': 'Single-line comment'
    'name': 'comment.line.double-slash.dyon'
    'begin': '//'
    'end': '$'
  }
  'escaped_character': {
    'name': 'constant.character.escape.dyon'
    'match': '\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
  }
  'string_literal': {
    'comment': 'Double-quote string literal'
    'name': 'string.quoted.double.dyon'
    'begin': 'b?"'
    'end': '"'
    'patterns': [
      { 'include': '#escaped_character' }
    ]
  }
  'self': {
    'comment': 'Declaration of variable'
    'match': '\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s(:=)'
    'captures': {
      '1': { 'name': 'variable.language.dyon' }
      '2': { 'name': 'keyword.operator.assignment.dyon' }
    }
  }
  'mut': {
    'comment': 'Mutable storage modifier'
    'name': 'storage.modifier.mut.dyon'
    'match': '\\bmut\\b'
  }
  'lifetime': {
    'comment': 'Named lifetime'
    'name': 'storage.modifier.lifetime.dyon'
    'match': '\'([a-zA-Z_][a-zA-Z0-9_]*)\\b'
    'captures': {
      '1': { 'name': 'entity.name.lifetime.dyon' }
    }
  }
  'core_types': {
    'comment': 'Built-in/core type'
    'name': 'storage.type.core.dyon'
    'match': '\\b(bool|f64|vec4|str|opt|res|thr)\\b'
  }
  'core_vars': {
    'comment': 'Core type variant'
    'name': 'support.constant.core.dyon'
    'match': '\\b(some|none|ok|err)\\b'
  }
  'type_params': {
    'comment': 'Type parameters'
    'name': 'meta.type_params.dyon'
    'begin': '<(?![=<])'
    'end': '>'
    'patterns': [
      { 'include': '#block_comment' }
      { 'include': '#line_comment' }
      { 'include': '#mut' }
      { 'include': '#lifetime' }
      { 'include': '#core_types' }
      { 'include': '#type_params' }
    ]
  }
}

'patterns': [
  # Comments
  { 'include': '#block_doc_comment' }
  { 'include': '#block_comment' }
  { 'include': '#line_doc_comment' }
  { 'include': '#line_comment' }
  # Strings
  { 'include': '#string_literal' }
  # Numbers
  {
    'comment': 'Floating point literal (fraction)'
    'name': 'constant.numeric.float.dyon'
    'match': '\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)?\\b'
  }
  {
    'comment': 'Floating point literal (exponent)'
    'name': 'constant.numeric.float.dyon'
    'match': '\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+(f32|f64)?\\b'
  }
  {
    'comment': 'Floating point literal (decimal)'
    'name': 'constant.numeric.integer.decimal.dyon'
    'match': '\\b[0-9][0-9_]*\\b'
  }
  # Language
  {
    'comment': 'Static storage modifier'
    'name': 'storage.modifier.static.dyon'
    'match': '\\bstatic\\b'
  }
  {
    'comment': 'Boolean constant'
    'name': 'constant.language.boolean.dyon'
    'match': '\\b(true|false)\\b'
  }
  {
    'comment': 'Control keyword'
    'name': 'keyword.control.dyon'
    'match': '\\b(break|continue|else|if|for|loop|return)\\b'
  }
  {
    'comment': 'Keyword'
    'name': 'keyword.other.dyon'
    'match': '\\b(sum|min|max|any|all|sift|and|or|go)\\b'
  }
  { 'include': '#self' }
  { 'include': '#mut' }
  { 'include': '#lifetime' }
  # Operators
  {
    'comment': 'Miscellaneous operator'
    'name': 'keyword.operator.misc.dyon'
    # Use 'x' as cross product when it is followed by whitespace.
    'match': '(\\bx\\s)'
  }
  {
    'comment': 'Comparison operator'
    'name': 'keyword.operator.comparison.dyon'
    'match': '(&&|\\|\\||==|!=)'
  }
  {
    'comment': 'Assignment operator'
    'name': 'keyword.operator.assignment.dyon'
    'match': '(:=|\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|=)'
  }
  {
    'comment': 'Arithmetic operator'
    'name': 'keyword.operator.arithmetic.dyon'
    'match': '(!|\\+|-|/|\\*|%|\\^|&|\\||<<|>>)'
  }
  {
    'comment': 'Comparison operator (second group because of regex precedence)'
    'name': 'keyword.operator.comparison.dyon'
    'match': '(<=|>=|<|>)'
  }
  # Standard types and traits
  { 'include': '#core_types' }
  { 'include': '#core_vars' }
  # Function calls
  {
    'comment': 'Function call'
    'match': '\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\('
    'captures': {
      '1': { 'name': 'entity.name.function.dyon' }
    }
  }
  {
    'comment': 'Named argument'
    'match': '\\b([a-zA-Z_][a-zA-Z0-9_]*)\\:'
    'captures': {
      '1': { 'name': 'entity.name.function.dyon' }
    }
  }
  # Function definition
  {
    'comment': 'Function definition'
    'begin': '\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)'
    'end': '[\\);]'
    'beginCaptures': {
      '1': { 'name': 'keyword.other.fn.dyon' }
      '2': { 'name': 'entity.name.function.dyon' }
    }
    'patterns': [
      { 'include': '#block_comment' }
      { 'include': '#line_comment' }
      { 'include': '#self' }
      { 'include': '#mut' }
      { 'include': '#lifetime' }
      { 'include': '#core_types' }
      { 'include': '#type_params' }
    ]
  }
]
